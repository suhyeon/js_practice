/*
for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 출력하시오.
ex) 
0
2
4
6
8
*/

//0부터 시작해 10미만까지 1씩 증가시켜서 루프를 돌게하는 반복문
for(var i = 0; i < 10 ; i++){
  //짝수일 때만 i를 출력하는 조건문
  if(i%2==0){
    console.log(i);
  }
}
//개행
console.log('\n');

/*
for문을 사용하여 0부터 10미만의 정수 중에서 짝수만을 작은 수부터 문자열로 출력하시오.
ex) 02468
*/
//비어있는 스트링을 선언
var str ='';
//0부터 10 미만까지 1씩 증가시켜서 루프를 돌게하는 반복문
for(var i = 0; i < 10 ; i++){
  //짝수일 때만 i를 비어있는 스트링str에 문자열로 병합생성
  if(i%2==0){
    str += i;
  }
}
//채워진 str을 출력
console.log(str);
//개행
console.log('\n');

/*
for문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오.
ex)
9
7
5
3
1
*/

//10부터 0까지 1씩 감소시켜서 루프를 돌게하는 반복문
for(var i = 10; i > 0; i--){
  //i가 홀수일 때만 i를 출력하는 조건문
  if(i%2!=0){
    console.log(i);
  }
}
//개행
console.log('\n');

/*
while문을 사용하여 0부터 10까지 정수 중에서 짝수만을 작은 수부터 출력하시오.
ex)
0
2
4
6
8
*/

//p변수를 선언 0으로 초기화
var p = 0;
//0부터 10미만 까지 루프를 돌게하는 반복문
while (p < 10) {
  //짝수일 때만 p를 출력하게 하는 조건문
  if(p%2 == 0){
    console.log(p);
  }
  //p증가문
  p++;
}
//개행
console.log('\n');

/*
while문을 사용하여 0부터 10미만의 정수 중에서 홀수만을 큰수부터 출력하시오.
ex)
9
7
5
3
1
*/
//t변수를 선언 10으로 초기화
var t = 10;
//10부터 0초과까지 루프를 돌게하는 반복문
while (t > 0) {
  //홀수일 때만 t를 출력하게 하는 조건문
  if(t%2!=0){
    console.log(t);
  }
  //t감소문
  t--;
}
//개행
console.log('\n');

/*
삼각형출력하기

다음을 참고하여 *(별)로 높이가 5인(var line = 5) 삼각형을 문자열로 완성하라.
개행문자('\n')를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자('\n')로 끝나도 관게없다.

// 높이(line)가 5
*
**
***
****
*****

*/
//비어있는 문자열 result 선언
var result = '';
//5부터 0초과까지 1 씩감소시켜서 루프를 돌게하는 반복문
for (var line = 5; line > 0; line--){
  //result에 *를 병합
  result += '*'; 
  //result출력
  console.log(result);
}
//개행
console.log('\n');

/*
트리 출력하기

다음을 참고하여 *(별)로 트리를 문자열로 완성하라.
개행문자('\n')를 사용하여 개행한다. 완성된 문자열의 마지막은 개행문자('\n')로 끝나도 관게없다.

// 높이(line)가 3일때 + 높이(line)가 5일때
*
**
***
*
**
***
****
*****

*/
//비어있는 문자열 tree1를 선언
var tree1 = '';
//0부터 3미만까지 1씩 증가시켜 루프를 돌게하는 반복문
for (var line = 3; line > 0; line--){
  //tree에 *를 병합
 tree1 += '*'; 
 //tree출력
  console.log(tree1);
}
//비어있는 문자열 tree2 선언
var tree2 = '';
//5부터 0초과까지 1 씩감소시켜서 루프를 돌게하는 반복문
for (var line = 5; line > 0; line--){
  //tre 병합
 tree2 += '*';
 //tre 출력 
  console.log(tree2);
}